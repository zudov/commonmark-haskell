-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Definitions of AST that represents a Commonmark (markdown) document.
--   
--   See <a>README</a>
@package comark-ast
@version 0.1.0


-- | A definition of Commonmark's AST
module Comark.Syntax

-- | A Document
newtype Doc t
Doc :: (Blocks t) -> Doc t
type Blocks t = Seq (Block t)

-- | Block elements
data Block t

-- | Thematic break
ThematicBreak :: Block t

-- | Heading: level, sequnce of inlines that define content
Heading :: HeadingLevel -> (Inlines t) -> Block t

-- | Block of code: info string, literal content
CodeBlock :: (Maybe t) -> t -> Block t

-- | Raw HTML Block
HtmlBlock :: t -> Block t

-- | Paragraph (a grouped sequence of inlines)
Para :: (Inlines t) -> Block t

-- | Block Quote (a quoted sequence of blocks)
Quote :: (Blocks t) -> Block t

-- | List: Type of the list, tightness, a sequnce of blocks (list item)
List :: ListType -> Bool -> (Seq (Blocks t)) -> Block t
data HeadingLevel
Heading1 :: HeadingLevel
Heading2 :: HeadingLevel
Heading3 :: HeadingLevel
Heading4 :: HeadingLevel
Heading5 :: HeadingLevel
Heading6 :: HeadingLevel
data ListType
Ordered :: Delimiter -> Int -> ListType
Bullet :: BulletMarker -> ListType
data Delimiter
Period :: Delimiter
Paren :: Delimiter
data BulletMarker

-- | <pre>
--   -
--   </pre>
Minus :: BulletMarker

-- | <pre>
--   +
--   </pre>
Plus :: BulletMarker

-- | <pre>
--   *
--   </pre>
Asterisk :: BulletMarker
type Inlines t = Seq (Inline t)

-- | Inline elements
data Inline t

-- | Text (string)
Str :: t -> Inline t

-- | Inline code
Code :: t -> Inline t

-- | Emphasized text (a sequence of inlines)
Emph :: (Inlines t) -> Inline t

-- | Strongly emphasized text (a sequence of inlines)
Strong :: (Inlines t) -> Inline t

-- | Hyperlink: visible link text (sequence of inlines), destination, title
Link :: (Inlines t) -> t -> (Maybe t) -> Inline t

-- | Image hyperlink: image description, destination, title
Image :: (Inlines t) -> t -> (Maybe t) -> Inline t

-- | Inline Raw HTML tag
RawHtml :: t -> Inline t

-- | A regular linebreak. A conforming renderer may render a soft line
--   break in HTML either as line break or as a space.
SoftBreak :: Inline t

-- | A line break that is marked as hard (either with spaces or backslash,
--   see the spec for details). In html it would be rendered as
--   <tt><a>/</a></tt>
HardBreak :: Inline t

-- | Consolidate adjacent text nodes
normalize :: Monoid t => Inlines t -> Inlines t

-- | Extract textual content from an inline. Note that it extracts only the
--   <tt>primary</tt> content (the one that is shown in first place). For
--   example it wouldn't extract an URL from the link.
asText :: (Monoid a, IsString a) => Inline a -> a
instance Data.Traversable.Traversable Comark.Syntax.Doc
instance Data.Foldable.Foldable Comark.Syntax.Doc
instance GHC.Base.Functor Comark.Syntax.Doc
instance GHC.Generics.Generic (Comark.Syntax.Doc t)
instance Data.Data.Data t => Data.Data.Data (Comark.Syntax.Doc t)
instance GHC.Classes.Eq t => GHC.Classes.Eq (Comark.Syntax.Doc t)
instance GHC.Read.Read t => GHC.Read.Read (Comark.Syntax.Doc t)
instance GHC.Show.Show t => GHC.Show.Show (Comark.Syntax.Doc t)
instance Data.Traversable.Traversable Comark.Syntax.Block
instance Data.Foldable.Foldable Comark.Syntax.Block
instance GHC.Base.Functor Comark.Syntax.Block
instance GHC.Generics.Generic (Comark.Syntax.Block t)
instance Data.Data.Data t => Data.Data.Data (Comark.Syntax.Block t)
instance GHC.Classes.Ord t => GHC.Classes.Ord (Comark.Syntax.Block t)
instance GHC.Classes.Eq t => GHC.Classes.Eq (Comark.Syntax.Block t)
instance GHC.Read.Read t => GHC.Read.Read (Comark.Syntax.Block t)
instance GHC.Show.Show t => GHC.Show.Show (Comark.Syntax.Block t)
instance Data.Traversable.Traversable Comark.Syntax.Inline
instance Data.Foldable.Foldable Comark.Syntax.Inline
instance GHC.Base.Functor Comark.Syntax.Inline
instance GHC.Generics.Generic (Comark.Syntax.Inline t)
instance Data.Data.Data t => Data.Data.Data (Comark.Syntax.Inline t)
instance GHC.Classes.Ord t => GHC.Classes.Ord (Comark.Syntax.Inline t)
instance GHC.Classes.Eq t => GHC.Classes.Eq (Comark.Syntax.Inline t)
instance GHC.Read.Read t => GHC.Read.Read (Comark.Syntax.Inline t)
instance GHC.Show.Show t => GHC.Show.Show (Comark.Syntax.Inline t)
instance GHC.Generics.Generic Comark.Syntax.ListType
instance Data.Data.Data Comark.Syntax.ListType
instance GHC.Classes.Ord Comark.Syntax.ListType
instance GHC.Classes.Eq Comark.Syntax.ListType
instance GHC.Read.Read Comark.Syntax.ListType
instance GHC.Show.Show Comark.Syntax.ListType
instance GHC.Generics.Generic Comark.Syntax.BulletMarker
instance Data.Data.Data Comark.Syntax.BulletMarker
instance GHC.Classes.Ord Comark.Syntax.BulletMarker
instance GHC.Classes.Eq Comark.Syntax.BulletMarker
instance GHC.Read.Read Comark.Syntax.BulletMarker
instance GHC.Show.Show Comark.Syntax.BulletMarker
instance GHC.Generics.Generic Comark.Syntax.Delimiter
instance Data.Data.Data Comark.Syntax.Delimiter
instance GHC.Classes.Ord Comark.Syntax.Delimiter
instance GHC.Classes.Eq Comark.Syntax.Delimiter
instance GHC.Read.Read Comark.Syntax.Delimiter
instance GHC.Show.Show Comark.Syntax.Delimiter
instance GHC.Generics.Generic Comark.Syntax.HeadingLevel
instance Data.Data.Data Comark.Syntax.HeadingLevel
instance GHC.Classes.Ord Comark.Syntax.HeadingLevel
instance GHC.Classes.Eq Comark.Syntax.HeadingLevel
instance GHC.Read.Read Comark.Syntax.HeadingLevel
instance GHC.Show.Show Comark.Syntax.HeadingLevel
instance Control.DeepSeq.NFData t => Control.DeepSeq.NFData (Comark.Syntax.Doc t)
instance GHC.Base.Monoid (Comark.Syntax.Doc t)
instance Control.DeepSeq.NFData t => Control.DeepSeq.NFData (Comark.Syntax.Block t)
instance Control.DeepSeq.NFData Comark.Syntax.HeadingLevel
instance Control.DeepSeq.NFData Comark.Syntax.ListType
instance Control.DeepSeq.NFData Comark.Syntax.Delimiter
instance Control.DeepSeq.NFData Comark.Syntax.BulletMarker
instance Data.String.IsString t => Data.String.IsString (Comark.Syntax.Inline t)
instance Control.DeepSeq.NFData t => Control.DeepSeq.NFData (Comark.Syntax.Inline t)


-- | Common AST-constructing functions
module Comark.Syntax.Builder

-- | A singleton string
str :: a -> Inlines a
